= Introducción a Git

:icons: font
:twitter-tag: ACCSA
:conference-tag:
:talk-tag: Intro Git
:linkattrs:

include::footer.ad[]

[NOTE.speaker]
====
Contenido de la presentación:

* Secciones teóricas:
** Introducción al versionado de código
** ¿Qué es Git?
** ¿Cómo funciona?
** Fundamentos
** Tutorial
** Git-Flow
* Sección práctica
====

== Introducción al versionado de código icon:code-fork[]

> no existe un proyecto software que funcione mínimamente bien (en lo que refiere a calidad, productividad y tranquilidad) sin una buena gestión de la configuración y control de versiones. - Javier Garzas

== !

image::ruta-integracion-continua.png[]

== ¿Qué es el control de versiones? icon:code[]

Un control de versiones es un sistema que registra los *cambios* realizados en un archivo o conjunto de archivos *a lo largo del tiempo*, de modo que puedas *recuperar versiones* específicas más adelante.

== Permite icon:check-square[]

* Regresar a versiones anteriores
* Comparar cambios
* Saber quién agrego cambios
* Saber cuándo se agregaron cambios
* Recuperar archivos

== Tipos de control de versiones icon:code-fork[]

* Centralizados: 1 solo servidor, clientes descargan código desde allí (copias instantáneas).
* Distribuidos: Cada cliente tiene una copia completa del repositorio (branch, commits).

== Estrategias de control de versiones

== Desarrollo Lineal
image::lineal.png[]

* En este enfoque los errores se propagan más fácilmente

== Desarrollo Paralelo, a través de ramas icon:code-fork[]
image::paralelo.png[]

== Desarrollo Paralelo, a través de ramas icon:code-fork[]
* Una rama por funcionalidad
* Cada desarrollador puede subir su código al control de versiones sin temer romper el código de los demás.
* Se reduce la propagación de errores.
* Se puede asegurar que la línea principal es estable, las tareas que partan de allí van a tener un inicio estable.
* Las tareas son independientes unas de otras.

== !

image:branches.png[]

== ¿Qué es icon:git[] ?

* Sistema de control de versiones
* Diseñado por Linus Torvalds

Tiene como objetivos:

** Eficiencia
** Confiabilidad en el mantenimiento de versiones de aplicaciones

== ¿Cómo funciona?

* Guarda copias instantáneas de los archivos, no diferencias.
* Sistema de archivos en miniatura.
* Si los archivos no se modifican, crea un puntero al archivo anterior.

== Fundamentos

* Las operaciones son locales.
* Controla la integridad de los archivos (SHA-1)
* Funciona con una base de datos a la que agrega datos
* Maneja estados para los archivos

== Tres estados

. Committed (Confirmado): Datos almacenados de manera segura en la BD local
. Modified (Modificado): Archivos modificados sin guardar
. Staged (Preparado): Archivos preparados para agregar en el próximo commit.

== !
image::trees.png[]

== Secciones principales de un proyecto Git
. Directorio icon:git[]: Metadatos y BD.
. Directorio de trabajo (working directory): Es una copia de una versión del proyecto. Es donde hacemos los cambios.
. Area de preparación (staging area): Información acerca de lo que va ir en el próximo commit (index).

== Flujo básico
. Modificas una serie de archivos en tu directorio de trabajo.
. Preparas los archivos, añadiéndolos a tu área de preparación.
. Confirmas los cambios, lo que toma los archivos tal y como están en el área de preparación y almacena esa copia instantánea de manera permanente en tu directorio de Git.

== Comandos básicos de icon:git[]

icon:terminal[]

== Crear un nuevo repositorio

 git init

== Checkout un repositorio

 git clone /path/to/repository

o

 git clone username@host:/path/to/repository

== Agregar & commit

Proponer cambios:

 git add <filename>
 git add *

Commit

 git commit -m "Commit message"

== Pushing a servidor remoto

 git push origin master

Se puede agregar un server con:

 git remote add origin <server>

== Ramas

Crear nueva rama

 git checkout -b feature_x

Cambiar a master

 git checkout master

Borrar una rama

 git checkout master

Publicar rama en servidor remoto

 git push origin <branch>

== Update & merge

Actualizar tu repositorio local

 git pull

Merge otra rama con tu rama actual

 git merge <branch>

Ver cambios entre ramas

 git diff <source_branch> <target_branch>

== Tagging

 git tag 1.0.0 1b2e1d63ff

Donde 1b2e1d63ff son los primeros digitos del commit que quieres usar para el tag

== Log (Ver historia)

  git log

Commits por autor

 git log --author=bob

Vista comprimida

 git log --pretty=oneline

Otras opciones

 git log --graph --oneline --decorate --all
 git log --name-status

 git log --help

== Reemplazar cambios locales

 git checkout -- <filename>

Reemplazar todos los cambios por los del servidor

 git fetch origin
 git reset --hard origin/master

== Conclusiones

* El control de versiones mejora la experiencia de desarrollo
* Permite manejar cambios y correcciones de una manera más robusta
* El modelo distribuido y por ramas permite realizar actividades en paralelo
* La manera más completa de usar git es a través de la línea de comandos
* Al ser Git el estándar de control de versiones de los proyectos open source posee una gran comunidad y una extensa documentación.

include::self.ad[]
