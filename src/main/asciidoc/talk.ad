= Introducción a icon:git[]
:icons: font
:twitter-tag: ACCSA
:conference-tag:
:talk-tag: Intro Git
:linkattrs:

include::footer.ad[]

[NOTE.speaker]
====
Contenido de la presentación:

* Secciones teóricas:
** Introducción al versionado de código
** ¿Qué es Git?
** ¿Cómo funciona?
** Fundamentos
** Tutorial
** Git-Flow
* Sección práctica
** Línea de comandos
====

== Introducción al versionado de código icon:code-branch[]

> no existe un proyecto software sobre que funcione mínimamente bien (en lo que refiere a calidad, productividad y tranquilidad) sin una buena gestión de la configuración y control de versiones. - Javier Garzas

== ¿Qué es el control de versiones?

Un control de versiones es un sistema que registra los *cambios* realizados en un archivo o conjunto de archivos *a lo largo del tiempo*, de modo que puedas *recuperar versiones* específicas más adelante.

== Permite

* Regresar a versiones anteriores
* Comparar cambios
* Saber quién agrego cambios
* Saber cuándo se agregaron cambios
* Recuperar archivos

== Tipos de control de versiones

* Centralizados
* Distribuidos

== Estrategias de control de versiones

== Desarrollo Lineal
image::lineal.png[]

* En este enfoque los errores se propagan más fácilmente

== Desarrollo Paralelo, a través de ramas
image::paralelo.png[]
* Una rama por funcionalidad

== Desarrollo Paralelo, a través de ramas
* Cada desarrollador puede subir su código al control de versiones sin temer romper el código de los demás.
* Se reduce la propagación de errores.
* Se puede asegurar que la línea principal es estable, las tareas que partan de allí van a tener un inicio estable.
* Las tareas son independientes unas de otras.

include::self.ad[]
